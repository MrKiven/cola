extern crate crypto;
extern crate rand;
extern crate rustc_serialize as serialize;

use serialize::base64::{STANDARD, ToBase64};

use crypto::aes::KeySize;
use crypto::digest::Digest;
use crypto::sha2::Sha256;

use crypto::{ symmetriccipher, buffer, aes, blockmodes };
use crypto::buffer::{ ReadBuffer, WriteBuffer, BufferResult };

use rand::{ Rng, OsRng };

fn encrypt(data: &[u8], key: &[u8], iv: &[u8]) -> Result<Vec<u8>, symmetriccipher::SymmetricCipherError> {
    // create an encryptor instance of the best performing
    // type available for the platform
    let mut encryptor = aes::cbc_encryptor(
        aes::KeySize::KeySize256,
        key,
        iv,
        blockmodes::PkcsPadding);

    let mut final_result = Vec::<u8>::new();
    let mut read_buffer = buffer::RefReadBuffer::new(data);
    let mut buffer = [0; 4096];
    let mut write_buffer = buffer::RefWriteBuffer::new(&mut buffer);

    loop {
        let result = try!(encryptor.encrypt(&mut read_buffer, &mut write_buffer, true));
        final_result.extend(write_buffer.take_read_buffer().take_remaining().iter().map(|&i| i));
        match result {
            BufferResult::BufferUnderflow => break,
            BufferResult::BufferOverflow => { }
        }
    }

    Ok(final_result)
}


fn decrypt(encrypted_data: &[u8], key: &[u8], iv: &[u8]) -> Result<Vec<u8>, symmetriccipher::SymmetricCipherError> {
    let mut decryptor = aes::cbc_decryptor(
        aes::KeySize::KeySize256,
        key,
        iv,
        blockmodes::PkcsPadding);

    let mut final_result = Vec::<u8>::new();
    let mut read_buffer = buffer::RefReadBuffer::new(encrypted_data);
    let mut buffer = [0; 4096];
    let mut write_buffer = buffer::RefWriteBuffer::new(&mut buffer);

    loop {
        let result = try!(decryptor.decrypt(&mut read_buffer, &mut write_buffer, true));
        final_result.extend(write_buffer.take_read_buffer().take_remaining().iter().map(|&i| i));
        match result {
            BufferResult::BufferUnderflow => break,
            BufferResult::BufferOverflow => { }
        }
    }

    Ok(final_result)
}

fn main() {
    /*
    let message = "123";

    let mut key: [u8; 32] = [0; 32];
    let mut iv: [u8; 16] = [0; 16];

    let mut rng = OsRng::new().ok().unwrap();
    rng.fill_bytes(&mut key);
    rng.fill_bytes(&mut iv);

    println!("key => {:?}, iv => {:?}", key, iv);
    println!("message `{:?}`.as_bytes() => {:?}", message, message.as_bytes());

    let encrypted_data = encrypt(message.as_bytes(), &key, &iv).ok().unwrap();
    println!("encrypted data -> {:?}", encrypted_data);
    let decrypted_data = decrypt(&encrypted_data[..], &key, &iv).ok().unwrap();
    println!("decrypted data -> {:?}", decrypted_data);

    assert!(message.as_bytes() == &decrypted_data[..]);

    println!("============================================================");

    let input = "123";
    let mut sha = Sha256::new();
    sha.input_str(input);
    println!("{}", sha.result_str());

    let mut bytes = Vec::from_elem(sha.output_bytes(), 0u8);
    sha.result(bytes.as_slice());
    println!("{}", bytes.to_base64(STANDARD)); */
    encrypt_rsa();
}


fn encrypt_() {
}

fn encrypt_rsa() {
    let baofoo_publick_key = String::from("2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d49494467444343416d6967417749424167494645466d44645949774451594a4b6f5a496876634e41514546425141774954454c4d416b474131554542684d430a51303478456a415142674e5642416f5443554e475130456754304e424d544165467730784e6a45774d6a51774e7a497a4d6a5261467730794d5445774d6a51770a4e7a497a4d6a52614d484578437a414a42674e5642415954416b4e4f4d524977454159445651514b45776c44526b4e424945394451544578447a414e42674e560a42417354426b4a6862325a76627a455a4d4263474131554543784d5154334a6e59573570656d463061573975595777744d5445694d434147413155454177775a0a516d46765a6d3976514f57756e6553376d4542614e6a67344d546b354f546c414d5443426e7a414e42676b71686b6947397730424151454641414f426a5141770a67596b4367594541333062674341593661677a754a6363534b664c652f324e654f65556d32475a4675616a6169364342394530534f673651796d577547772f660a58794c3672635a642f6561766577314563324544546571344467567564616836485a624933455874325453784c706e364177444d774b675347685770785232560a31486e45694979544f436a6457653567554a6c3632556e4535616345726a4f304739772b6f2b714779313372302f5a5a366830434177454141614f42386a43420a377a416642674e5648534d454744415767425452322b6d4967755864476f394d7167434d766e7a79717876323254424942674e56485341455154412f4d4430470a43474342484962764b6745424d4445774c7759494b775942425155484167455749326830644841364c7939336433637559325a6a5953356a62323075593234760a64584d7664584d744d545175614852744d44634741315564487751774d4334774c4b41716f4369474a6d6830644841364c79396a636d777559325a6a5953356a0a6232307559323476556c4e424c324e79624451304d44457559334a734d4173474131556444775145417749443644416442674e564851344546675155527174300a715264436b526562707556416d6b69446c4d516a39354977485159445652306c42425977464159494b7759424251554841774947434373474151554642774d450a4d41304743537147534962334451454242515541413449424151414854676b5167343770344679355043466364477a58354c6e487179484b2f6379736a63706f0a6c48536a38392f732f6b5831705855374a7167702f464431524a752f4e6736726d6748534e4452395a4877617064632b2b5052537844424e2f2b32426e52364a0a34436f784862306537736a446464623752316365547552584e6a5a7572755638306a35484679636772485373534c492f4c655a71317570304e4c4d2b594f78740a2f2b7a736e6b416947664c76524356546c707077676668707354314c6864567672446b594d656462677241317a714c2f6b6258653044496462386b6e324738510a377a523853455950586e57734452324b746e6f35336d784b6878396b673344516179574d75644e593871792b536f30754254314371437357523753576f4d70580a56536e4b4c5857424352447165765674344232667054486f6f34754d346f5a44676759616631346b79393064306c57480a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a");
    let wehome_private_key = String::from("30820810020103308207cc06092a864886f70d010701a08207bd048207b9308207b5308203c406092a864886f70d010701a08203b5048203b1308203ad308203a9060b2a864886f70d010c0a0102a08202b6308202b2301c060a2a864886f70d010c0103300e04081a124cbbdee364cf020207d004820290b3005f2a1f6578abc6fa8caa052d77b8f88a0cff9c200aa9067977e870f29db86c10bd00ddcbc525a12234ae4af335f9612fb2aefc0e53c2075b5811a2b46ee35791fbf361f8b5d35a122b54749c7cf63797de21369f454e59c6a3418dace8cd07909e577a7acaf816beda37db88a812b1bd8fa452bcf4810e02fca2b5d2747f563c90c7ea8f282c59406199d498c312246315e1627ec6bc7a1b65a7938f722dcf2ee3a02c2dfe1c83310b32f197d8fd48e03a2c6a029d41818e99060ad2b1380697edf1195f0b494333b41011a32a3392585aa85d322f5a017dc55d8992a1a43a3e13550a93b66d71b3952f1179100d780286bd04374324efcedc3f2611e440a4ee3e0355827ff062d84f66b5c51e2890866e8fa656b704d63c2040cab54fd97d933756613c506f9dbb8897c40ab011b45a9788ac697b303f997bf7db20f8f0716f9e368c491c93f03ddc89b2d5ba0afc4dd1e770608a1779d2a8592f6aeadafd30d0f711d53fcb1cb3e3b52245f4fd00438c00cac8ac407339ed21686b65efde7b9a1c8ae3b3b611c6d39eda7b18e0aaf5fd2fa2152d13e048885bf66d1e18b61dadf1447171738deb6845ee1e21846d7806ad4d0ae6ed31eecfde527b879e1b204e7739803197c9911a4c441bbb9f0a0738a4658f6cf6328920795a368833d16e1391756ca376a2962f1f36b14f4e038db14aebc6488e233a76a7d0d49d6aa8a51a85fa56208cda33edb80f8b8e16eababdaa8075aa26a3c5068e0caf499f1cbf5bfe58de6235448ff381c648ac2a6cb5b1a58f69a24eec296067cafda46d9646b16bb8ba0694a84b466965a375936016b393036474871eb3f49843953652c48e4cfb7e4ac440078a6f4e2799a40beee931c6a7f042722ee77397488321f9b9e8e7b01058de7f131535c1de763bed3181df301306092a864886f70d0109153106040401000000305b06092a864886f70d010914314e1e4c007b00460033004300350031003200320042002d0044003900380038002d0034003400320035002d0041004100430043002d003600420041003500320037003400320036004600360032007d306b06092b0601040182371101315e1e5c004d006900630072006f0073006f0066007400200045006e00680061006e006300650064002000430072007900700074006f0067007200610070006800690063002000500072006f00760069006400650072002000760031002e0030308203e906092a864886f70d010701a08203da048203d6308203d2308203ce060b2a864886f70d010c0a0103a08203a6308203a2060a2a864886f70d01091601a08203920482038e3082038a30820272a00302010202051100141531300d06092a864886f70d01010505003021310b300906035504061302434e31123010060355040a130943464341204f434131301e170d3137303631323036323333335a170d3138303631323036323333335a307b310b300906035504061302434e31123010060355040a130943464341204f434131310f300d060355040b130642616f666f6f31193017060355040b13104f7267616e697a6174696f6e616c2d31312c302a06035504030c2342616f666f6f40e69c8de58aa1404e39313331303130354d41314657305739344e403130819f300d06092a864886f70d010101050003818d0030818902818100a9dd9e128d7f65601fb0333bb6972ab3eded37f96cf0f39a6986ff4cad433c7609c84faa13cbfa39f0b658df65c40790abf003340ee91dae4193f96140c1b901fed2696ce6da93e94bea24b26c71decb067bcded09ee3ddb8242b2088f4ae9e73f7896357a085b6d72d2af278550af5a1f8f49dc2d1a869c233ae301ef25990b0203010001a381f23081ef301f0603551d23041830168014d1dbe98882e5dd1a8f4caa008cbe7cf2ab1bf6d930480603551d200441303f303d060860811c86ef2a01013031302f06082b060105050702011623687474703a2f2f7777772e636663612e636f6d2e636e2f75732f75732d31342e68746d30370603551d1f0430302e302ca02aa0288626687474703a2f2f63726c2e636663612e636f6d2e636e2f5253412f63726c383037302e63726c300b0603551d0f0404030203e8301d0603551d0e04160414849d53f2b2e3e4ad943f4a5562e3f529c70bbd5b301d0603551d250416301406082b0601050507030206082b06010505070304300d06092a864886f70d010105050003820101005cb87c76671d993d38dc9d7ae42743cb1fe32d9c1369792bf17069134f539879e6be3360b7e9a0d4374f4487815bc1598944b9c0b8da075e5af4f23375daf21825649b7c38d5ea319b2f2fdf2229d79b99d9be116116c9abbe65953363cdc1837c900223b0d8a6a47bae822b4900cb9a6618927c0b50c27523574cd1c399b7e1d12b097436b7335831e42430d7502b1c5ce6254c540c30904308d975e07dd2a3857f95cecd3b68d09c47ce6be6e9248cfc425f890f6a8aaeec0c97704ac1f28388a1f8405adca1b9b60ae9fd01a30a89612aa1683f1475e8d770447e994fb5ab6cb765ebaae3f821a8a7ee8265a098387d8ddbfafd6008ac2db8100db63df6323115301306092a864886f70d0109153106040401000000303b301f300706052b0e03021a041487f8f32bdb347522f26c449c58d146c662c2d3d60414916c8cdb87d41e73f82c465f6bfbf65b4c720556020207d0");
    println!("{}", wehome_private_key);
}
